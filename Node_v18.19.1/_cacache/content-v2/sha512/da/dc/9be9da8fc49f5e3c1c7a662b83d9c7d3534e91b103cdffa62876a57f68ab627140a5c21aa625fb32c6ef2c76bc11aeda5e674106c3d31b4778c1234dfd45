{"_id":"@aklinker1/rollup-plugin-visualizer","_rev":"3848819-65d90f5138adbc8b11a0c7ff","dist-tags":{"latest":"5.12.0"},"name":"@aklinker1/rollup-plugin-visualizer","time":{"created":"2024-02-23T21:34:09.097Z","modified":"2024-02-23T21:34:09.706Z","5.12.0":"2024-02-23T21:32:00.751Z"},"versions":{"5.12.0":{"name":"@aklinker1/rollup-plugin-visualizer","version":"5.12.0","main":"./dist/plugin/index.js","author":{"name":"Denis Bardadym","email":"bardadymchik@gmail.com"},"license":"MIT","bin":{"rollup-plugin-visualizer":"dist/bin/cli.js"},"repository":{"type":"git","url":"git+ssh://git@github.com/btd/rollup-plugin-visualizer.git"},"homepage":"https://github.com/btd/rollup-plugin-visualizer","bugs":{"url":"https://github.com/btd/rollup-plugin-visualizer/issues"},"scripts":{"lint":"eslint 'plugin/**/*.ts' 'src/**/*.{ts,tsx}'","build":"run-p build:*","build:plugin":"tsc","build:frontend":"rollup -c rollup.config.js","build-dev":"rollup -c rollup.config-dev.js","clean":"del-cli dist","prebuild":"npm run clean","test":"jest"},"dependencies":{"open":"^8.4.0","picomatch":"^2.3.1","source-map":"^0.7.4","yargs":"^17.5.1"},"peerDependencies":{"rollup":"2.x || 3.x || 4.x"},"peerDependenciesMeta":{"rollup":{"optional":true}},"devDependencies":{"@jest/globals":"^29.3.1","@rollup/plugin-alias":"^5.0.0","@rollup/plugin-commonjs":"^25.0.1","@rollup/plugin-node-resolve":"^15.0.0","@rollup/plugin-terser":"^0.4.4","@rollup/plugin-typescript":"^11.1.1","@types/bytes":"^3.1.1","@types/d3-array":"^3.0.3","@types/d3-color":"^3.1.0","@types/d3-force":"^3.0.3","@types/d3-hierarchy":"^3.1.0","@types/d3-scale":"^4.0.2","@types/d3-shape":"^3.1.0","@types/node":"^18.8.5","@types/picomatch":"^2.3.0","@types/yargs":"^17.0.10","@typescript-eslint/eslint-plugin":"^6.12.0","@typescript-eslint/parser":"^6.12.0","bytes":"^3.1.2","d3-array":"^3.1.6","d3-color":"^3.1.0","d3-force":"^3.0.0","d3-hierarchy":"^3.1.2","d3-scale":"^4.0.2","d3-shape":"^3.1.0","del-cli":"^5.0.0","eslint":"^8.16.0","eslint-config-prettier":"^9.0.0","eslint-plugin-prettier":"^5.0.1","jest":"^29.3.1","npm-run-all":"^4.1.5","picomatch-browser":"^2.2.6","postcss":"^8.4.14","postcss-url":"^10.1.3","preact":"^10.7.2","prettier":"^3.1.0","rollup":"^4.5.2","rollup-plugin-postcss":"^4.0.2","sass":"^1.52.1","ts-jest":"^29.0.3","typescript":"~5.3.2"},"engines":{"node":">=14"},"keywords":["rollup-plugin","visualizer","network","treemap","sunburst","diagram"],"types":"./dist/plugin/index.d.ts","gitHead":"6998efbd51edea359477f246a8913a2d2404bbbe","description":"[![NPM Version](https://img.shields.io/npm/v/rollup-plugin-visualizer.svg)](https://npmjs.org/package/rollup-plugin-visualizer) [![Node.js CI](https://github.com/btd/rollup-plugin-visualizer/actions/workflows/node.js.yml/badge.svg)](https://github.com/btd","_id":"@aklinker1/rollup-plugin-visualizer@5.12.0","_nodeVersion":"18.16.1","_npmVersion":"9.5.1","dist":{"integrity":"sha512-X24LvEGw6UFmy0lpGJDmXsMyBD58XmX1bbwsaMLhNoM+UMQfQ3b2RtC+nz4b/NoRK5r6QJSKJHBNVeUdwqybaQ==","shasum":"259d7ab48248eaea6439b7b281a5d1b262c21bb6","tarball":"https://registry.npmmirror.com/@aklinker1/rollup-plugin-visualizer/-/rollup-plugin-visualizer-5.12.0.tgz","fileCount":39,"unpackedSize":689318,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIA/jADq3wTcDOQZ2tbE1cT3jKYb2NEtPvXksmHFXX4qtAiEA+KN50NlnVHu22bqJ2RObT+vxrPZtQPP4+aV7qEGiC3w="}],"size":176821},"_npmUser":{"name":"_aklinker1","email":"aaronklinker1@gmail.com"},"directories":{},"maintainers":[{"name":"_aklinker1","email":"aaronklinker1@gmail.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/rollup-plugin-visualizer_5.12.0_1708723920510_0.5420232266635061"},"_hasShrinkwrap":false,"_cnpmcore_publish_time":"2024-02-23T21:32:00.751Z","publish_time":1708723920751,"_source_registry_name":"default"}},"author":{"name":"Denis Bardadym","email":"bardadymchik@gmail.com"},"bugs":{"url":"https://github.com/btd/rollup-plugin-visualizer/issues"},"description":"[![NPM Version](https://img.shields.io/npm/v/rollup-plugin-visualizer.svg)](https://npmjs.org/package/rollup-plugin-visualizer) [![Node.js CI](https://github.com/btd/rollup-plugin-visualizer/actions/workflows/node.js.yml/badge.svg)](https://github.com/btd","homepage":"https://github.com/btd/rollup-plugin-visualizer","keywords":["rollup-plugin","visualizer","network","treemap","sunburst","diagram"],"license":"MIT","maintainers":[{"name":"_aklinker1","email":"aaronklinker1@gmail.com"}],"readme":"# Rollup Plugin Visualizer\n\n[![NPM Version](https://img.shields.io/npm/v/rollup-plugin-visualizer.svg)](https://npmjs.org/package/rollup-plugin-visualizer) [![Node.js CI](https://github.com/btd/rollup-plugin-visualizer/actions/workflows/node.js.yml/badge.svg)](https://github.com/btd/rollup-plugin-visualizer/actions/workflows/node.js.yml)\n\nVisualize and analyze your Rollup bundle to see which modules are taking up space.\n\n## Screenshots\n\n![pic](https://github.com/btd/rollup-plugin-visualizer/blob/master/pics/collage.png?raw=true)\n\n## Installation\n\n```sh\nnpm install --save-dev rollup-plugin-visualizer\n```\n\nor via yarn:\n\n```sh\nyarn add --dev rollup-plugin-visualizer\n```\n\n## Usage\n\nImport\n\n```javascript\n// es\nimport { visualizer } from \"rollup-plugin-visualizer\";\n// or\n// cjs\nconst { visualizer } = require(\"rollup-plugin-visualizer\");\n```\n\nUsage with rollup (rollup.config.js)\n\n```js\nmodule.exports = {\n  plugins: [\n    // put it the last one\n    visualizer(),\n  ],\n};\n```\n\nUsage with vite (vite.config.js)\n\n```js\nmodule.exports = {\n  plugins: [visualizer()],\n};\n```\n\nUsage with vite TypeScript (vite.config.ts)\n\n```ts\nimport { defineConfig, type PluginOption } from 'vite'\nexport default defineConfig({\n  plugins: [visualizer() as PluginOption],\n})\n```\n\nUsage with SvelteKit (vite.config.js)\n\n```js\nconst config = {\n  plugins: [\n    visualizer({\n      emitFile: true,\n      filename: \"stats.html\",\n    }),\n  ],\n};\n\nexport default config;\n```\n\nYou will find 2/3 files in .svelte-kit/output dir named stats.html (see vite logs for file locations) . You can use this snippet as a starting point and change props/path.\nYou can also generate 3 json files and combine them to one with cli util.\n\n## How to use generated files\n\nBlue color used to to mark project-own files. This could be: written by you files or generated by build tool files.\n\nGreen color used to mark your dependencies.\n\nInternally it just checks if file id prefix is `node_modules`.\n\nAll charts refresh layout on window resize.\n\n### Sunburst\n\nThis circular hierarchical diagram can help you find huge pieces of code (aka that one huge thing). If you click on some arc it will increase its and all nested arcs size for better inspection.\n\n### Treemap\n\nThis rectangular hierarchical diagram can help you find huge pieces. Just look on biggest reclangle. But also it can help you find modules included several times, they will have the same topology and relative size. If you click on reclangle it will increase in size for further inspection.\n\n### Network\n\nThis digram should help you answer for the question 'why it is included?'. After force layout stabilize all nodes, you can move it back and forth by dragging with your mouse. Gray circles are treeshakened out files.\n\nIn real life scenarious, sometimes you will see terribly connected diagrams. There is no 100% working solution for everyone, it is expected you topology will look 'terrible' and not hold on screen. To make it still visually ispectable, first remove all highly connected nodes that you see (typical examples: commonjsHelpers, tslib, react etc, basically if tooltip for the node is not hold on the screen - exclude this node), after layout stabilization you will see, your layout is not that terrible anymore and most of dependencies cluster together. Move layout to find pieces you looked for.\n\nWhen you click on node it will hightlight nodes that are listed in tooltip (the files that imports current node).\n\n### Raw-data\n\nThis template produce JSON output with raw data. Normally it should be used with CLI from this plugin.\n\n### List\n\nOutput yml file with all the data, could be good idea to commit this file to track file changes.\n\n## Options\n\n`filename` (string, default `stats.{ext depending template}`) - name of the file with diagram to generate\n\n`title` (string, default `Rollup Visualizer`) - title tag value\n\n`open` (boolean, default `false`) - Open generated file in default user agent\n\n`template` (string, default `treemap`) - Which diagram type to use: `sunburst`, `treemap`, `network`, `raw-data`, `list`.\n\n`gzipSize` (boolean, default `false`) - Collect gzip size from source code and display it at chart.\n\n`brotliSize` (boolean, default `false`) - Collect brotli size from source code and display it at chart.\n\n### Advanced options (touch only if you really need it):\n\n`emitFile` (boolean, default `false`) - Use rollup's `emitFile` to generate file. Useful if you want to control all output in one place (via rollup output options). This also could be usefull with svelte as it calls vite several times.\n\n`sourcemap` (boolean, default `false`) - Use sourcemaps to calculate sizes (e.g. after UglifyJs or Terser). **Always add plugin as last option.**\n\n`projectRoot` (string | RegExp, default `process.cwd()`) - This is some common root(s) path to your files. This is used to cut absolute files paths out.\n\n`include` (Filter | Filter[], default `undefined`) - Filter for inclusion\n\n`exclude` (Filter | Filter[], default `undefined`) - Filter for exclusion\n\n`Filter` type is `{ bundle?: picomatchPattern, file?: picomatchPattern }`\n\n**Note about `include` and `exclude`** - If options.include is omitted or has zero length, filter will return true by default. Otherwise, an ID must match one or more of the picomatch patterns, and must not match any of the options.exclude patterns. This entries will not be included in stats at all.\n\n#### Include and Exclude\n\nInclude and exclude filters uses glob matchers with picomatch. In UI you can do such combinations (both exclude and include):\n* Filter bundle and file in one string\n  * `translation-*.js:*/**/index.js` - this selects all bundles that matches `translation-*.js` and all the files by all paths that name is `index.js`. `:` is separator and required only when bundle search used.\n  * Format for this kind of filter is `BUNDLE_GLOB:FILE_GLOB`\n* Filter bundle in one string\n  * This is special case of bundle+file filter, you need to omit `FILE_GLOB` part (empty string) \n* Filter file in one string\n  * **This is DEFAULT search option**\n  * `*/**/index.js` - select all files that name is index.js   \n\n## CLI\n\nThis plugin provides cli util `rollup-plugin-visualizer`. Add `--help` to check actual options. It can be used like:\n\n```sh\nrollup-plugin-visualizer [OPTIONS] stat1.json stat2.json ../stat3.json\n```\n\nThis can be usefull in case you have different config files in the same project and you want to display all of them in the same chart.\n\n## Build plugin\n\nFor development if you need to build plugin, just exec:\n\n```js\nnpm run build\n```\n\n## Disclaimer about generated files\n\nGenerated html files do not and never will contain your source code (contents of files). They can contain only js/html/css code required to build chart (plugin code) and statistical information about your source code.\n\nThis statistical information can contain:\n\n- size of files included in bundle\n- size of files included in source map\n- file's paths\n- files hierarchy (fs tree for your files)\n\n## Upgrades\n\nSee CHANGELOG.md.\n\n## Versioning\n\n* Plugin backend (one appears in configs) are strictly follows SemVer\n* Plugin frontend (generated file):\n  * `network`, `treemap`, `sunburst` can change does not matter of version (colors, texts, visual structure etc)\n  * `raw-data` format follows own `version` property\n  * `list` follows semver\n","repository":{"type":"git","url":"git+ssh://git@github.com/btd/rollup-plugin-visualizer.git"},"_source_registry_name":"default"}